#include <WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

const char* ssid = "Wokwi-GUEST";
const char* password = "";
const char* mqttServer = "broker.hivemq.com";
const int mqttPort = 1883;

const char* mqttUser = " ";
const char* mqttPassword = " ";

const int DHT_PIN = 4; // Pino onde o sensor DHT está conectado
const int ledPin = 2;  // Pino para controle do LED

DHT dht(DHT_PIN, DHT22);
WiFiClient espClient;
PubSubClient client(espClient);

LiquidCrystal_I2C lcd(0x27, 16, 2);

void setup() {
  Serial.begin(9600);
  Serial.print("Conectando-se ao Wi-Fi");
  WiFi.begin(ssid, password, 6); // Use as informações da sua rede Wi-Fi
  while (WiFi.status() != WL_CONNECTED) {
    delay(100);
    Serial.print(".");
  }
  Serial.println(" Conectado!");

  client.setServer(mqttServer, mqttPort);
  client.setCallback(callback);

  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("Temp:");
  lcd.setCursor(0, 1);
  lcd.print("Humidity:");
}

void callback(char* topic, byte* payload, unsigned int length) {
  // Callback de MQTT (se necessário)
}

void reconnect() {
  while (!client.connected()) {
    Serial.println("Connecting to MQTT...");
    
    if (client.connect("ESP32Client", mqttUser, mqttPassword)) {
      Serial.println("Connected to MQTT");
    } else {
      Serial.print("MQTT connection failed, rc=");
      Serial.print(client.state());
      Serial.println(" Retrying in 5 seconds...");
      delay(5000);
    }
  }
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();

  lcd.setCursor(6, 0);
  lcd.print(temperature, 1);
  lcd.setCursor(9, 1);
  lcd.print(humidity, 1);

  char tempStr[6];
  dtostrf(temperature, 5, 1, tempStr);
  
  char humStr[6];
  dtostrf(humidity, 5, 1, humStr);

  client.publish("sensor/temperature", tempStr);
  client.publish("sensor/humidity", humStr);

  delay(5000);
}
